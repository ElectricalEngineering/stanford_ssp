<?php
/**
 * @file
 * Code for the Stanford SimpleSAML PHP module.
 */

/**
 * Implements hook_block_info().
 */

function stanford_ssp_block_info() {
  $blocks['stanford_ssp_login_block'] = array(
    'info'       => t('Stanford SimpleSAML PHP Authentication'),
    'status'     => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages'      => "user\nuser/*",
    'weight'     => 0,
    'region'     => '',
    'cache'      => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_configure().
 */

function stanford_ssp_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'stanford_ssp_login_block':
      $form['stanford_ssp_link_text'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Text of the SimpleSAML PHP login link'),
      '#require'       => TRUE,
      '#size'          => 60,
      '#description'   => t('Here you can replace the text of the SimpleSAML PHP link.'),
      '#default_value' => variable_get('stanford_ssp_link_text', 'SUNetID Login'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */

function stanford_ssp_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'stanford_ssp_login_block':
      // only show block for anonymous users
      if (user_is_logged_in()) {
        return $block;
      }
      $stanford_ssp_link_text = variable_get('stanford_ssp_link_text', 'SUNetID Login');
      $block = array(
        'subject' => t('SUNetID Login'),
        'content' => l($stanford_ssp_link_text, 'saml_login'),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */

function stanford_ssp_menu() {
  $items = array();

  $items['stanford_ssp/403'] = array(
    'page callback' => 'stanford_ssp_error_page',
    'access callback' => 'stanford_ssp_access_check',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Handle 403 errors by redirecting users to saml_login for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */

function stanford_ssp_error_page() {
  // Figure out where the user is trying to go before redirecting him.
  $dest = drupal_get_destination();
  // We have to unset $_GET['destination'] here, otherwise drupal_goto() will ignore the $path argument.
  // See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_goto/7.
  unset($_GET['destination']);
  // Redirect the user to saml_login, then send him on his way.
  drupal_goto('saml_login', array('query' => $dest));
}

function stanford_ssp_access_check() {
  if (user_is_anonymous()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * @param string $entitlement A value in eduPersonEntitlement, e.g., anchorage_support
 * @param string $role The name of the role
 *
 * Map an entitlement to a role.
 */
function stanford_ssp_map_entitlement_to_role($entitlement, $role) {
  $entitlement = check_plain($entitlement);
  // look up rid
  $role_object = user_role_load_by_name($role);
  if (!$role_object) {
    drupal_set_message(t('No role exists with the name "@role"', array('@role' => $role)), 'error');
  }
  else {
    $rid = $role_object->rid;
    // look up current role mapping, if any
    $role_mapping = variable_get('simplesamlphp_auth_rolepopulation');
    if (!empty($role_mapping)) {
      $role_mapping .= "|";
    }
    // Add our mapping
    $role_mapping .= $rid . ":eduPersonEntitlement,=," . $entitlement;
    // Save our mapping
    variable_set('simplesamlphp_auth_rolepopulation', $role_mapping);
    drupal_set_message(t('Mapped the "@entitlement" entitlement to the "@role" role.', array('@entitlement' => $entitlement, '@role' => $role)));
    watchdog('stanford_ssp', t('Mapped the "@entitlement" entitlement to the "@role" role.', array('@entitlement' => $entitlement, '@role' => $role)));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_ssp_form_simplesamlphp_auth_settings_alter(&$form, &$form_state, $form_id) {
//  $form['simplesamlphp_auth_grp_user']['#collapsible'] = TRUE;
//  $form['simplesamlphp_auth_grp_user']['#collapsed'] = TRUE;

}
