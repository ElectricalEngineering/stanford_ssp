<?php
/**
 * @file
 * Code for the Stanford SimpleSAML PHP module.
 */

/**
 * Implements hook_block_info().
 */

function stanford_ssp_block_info() {
  $blocks['stanford_ssp_login_block'] = array(
    'info'       => t('Stanford SimpleSAML PHP Authentication'),
    'status'     => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages'      => "user\nuser/*",
    'weight'     => 0,
    'region'     => '',
    'cache'      => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_configure().
 */

function stanford_ssp_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'stanford_ssp_login_block':
      $form['stanford_ssp_link_text'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Text of the SimpleSAML PHP login link'),
      '#require'       => TRUE,
      '#size'          => 60,
      '#description'   => t('Here you can replace the text of the SimpleSAML PHP link.'),
      '#default_value' => variable_get('stanford_ssp_link_text', 'SUNetID Login'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_view().
 */

function stanford_ssp_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'stanford_ssp_login_block':
      // only show block for anonymous users
      if (user_is_logged_in()) {
        return $block;
      }
      $stanford_ssp_link_text = variable_get('stanford_ssp_link_text', 'SUNetID Login');
      $block = array(
        'subject' => t('SUNetID Login'),
        'content' => l($stanford_ssp_link_text, 'saml_login'),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */

function stanford_ssp_menu() {
  $items = array();

  $items['stanford_ssp/403'] = array(
    'page callback' => 'stanford_ssp_error_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Handle 403 errors by redirecting users to saml_login for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */

function stanford_ssp_error_page() {
  global $user;
  // If logged in.
  if ($user->uid) {
    return MENU_ACCESS_DENIED;
  }
  // If not logged in
  else {
    // Redirect to login
    drupal_goto('saml_login');
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_ssp_form_simplesamlphp_auth_settings_alter(&$form, &$form_state, $form_id) {
  $form['simplesamlphp_auth_grp_user']['#collapsible'] = TRUE;
  $form['simplesamlphp_auth_grp_user']['#collapsed'] = TRUE;
  $table = array();
  $submitted = !empty($form_state['post']);

  $result = db_query('SELECT rid, name FROM {role} WHERE rid > 2');
  while ($role = $result->fetchObject()) {
    $roles[$role->rid] = $role->name;
  }

  $form['new_rid'] = array(
    '#name' => 'new_rid',
    '#type' => 'select',
    '#options' => $roles,
  );

  $form['new_group'] = array(
    '#name' => 'new_group',
    '#type' => 'textfield',
    '#default_value' => '',
  );

  $form['new_submit'] = array(
    '#name' => 'new_submit',
    '#type' => 'submit',
    '#value' => t('Add Mapping'),
  );

  if (!$submitted) {
    $table[] = array(drupal_render($form['new_rid']), drupal_render($form['new_group']), drupal_render($form['new_submit']));
  }
  else {
    // Keep the UI consistent.
    $form['new_rid']['#prefix'] = '<table><tr class="odd"><td>';
    $form['new_rid']['#suffix'] = '</td><td>';
    $form['new_group']['#suffix'] = '</td><td>';
    $form['new_submit']['#suffix'] = '</td><td>';
    $form['cancel'] = array(
      '#type' => 'markup',
      '#value' => l(t('Cancel'), 'admin/config/webauth/mappings'),
      '#suffix' => '</td></tr></table>',
    );
  }

  $result = db_query("SELECT wr.warid, r.name, wr.wa_group as `group` FROM {webauth_roles} wr INNER JOIN {role} r ON wr.rid = r.rid WHERE r.rid > 2");
  while ($group = $result->fetchObject()) {
    $button_id = 'remove_warid_' . $group->warid;
    $form[$button_id] = array(
      '#name' => $button_id,
      '#type' => 'submit',
      '#value' => t('Remove Mapping'),
    );
    $row = array($group->name, $group->group, drupal_render($form[$button_id]));
    $table[] = $row;
  }
  $header = array(
    t('Drupal Role'),
    t('Workgroup (e.g. stanford:staff)'),
    t('Action')
  );
  $form['output'] = array(
    '#markup' => theme('table', array(
      'header' => $header,
      'rows' => $table,
    )),
  );

  dpm($form);

}